# -*- coding: utf-8 -*-
"""stock_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qd4Evn6Rfa9_2L3sGw8uP2D6XiKPdhV_
"""

import pandas as pd
pd.__version__
!pip install quandl
import quandl, math, datetime
import numpy as np
from sklearn import preprocessing, cross_validation, svm
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

df = quandl.get("SSE/FB2A")
#print(df.head())

prediction_length = 0.03

df = df[['Previous Day Price', 'High', 'Low', 'Last', 'Volume']]
df['hl_pct'] = (df['High'] - df['Last']) / df['Last'] * 100.0
df['pct_change'] = (df['Last'] - df['Previous Day Price']) / df['Previous Day Price'] * 100.0
print(df.head())

df = df[['Last', 'hl_pct', 'pct_change', 'Volume']]
#print(df.head())

forecase_col = 'Last'
df.fillna(-9999, inplace=True)
forecast_out = int(math.ceil(prediction_length * len(df))) #10% of data out for prediction length
print("prediction length = ", forecast_out)

df['label'] = df[forecase_col].shift(-forecast_out)
#print(df.tail())

x = np.array(df.drop(['label'],1))
x = preprocessing.scale(x)
x = x[:-forecast_out]
x_future = x[-forecast_out:]

df.dropna(inplace=True)
y = np.array(df['label'])
y = np.array(df['label'])
#print(len(x), len(y))

# use 20% of data for testing, 80% for training
x_train, x_test, y_train, y_test = cross_validation.train_test_split(x, y, test_size=0.2)

# use linear regression as classifier
clf = LinearRegression(n_jobs=10)
#clf = svm.SVR()
clf.fit(x_train, y_train)
accuracy = clf.score(x_test, y_test)
print("accuracy = ", accuracy)

forecast_set = clf.predict(x_future)
print(forecast_set)

df['Forecast'] = np.nan

last_date = df.iloc[-1].name
last_unix = last_date.timestamp()
one_day = 86400
next_unix = last_unix + one_day

for i in forecast_set:
  next_date = datetime.datetime.fromtimestamp(next_unix)
  next_unix += one_day
  df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)] + [i]
  
df['Last'].plot()
df['Forecast'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()